<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Building QPN Models with QPE</title>
  <link rel="stylesheet" href="shared.css" type="text/css" />
  </head>

<body>
<h1>QPME User's Guide</h1>
<h2>Building QPN Models with QPE</h2>

<h3>Overview</h3>


<p>
QPE (Queueing Petri net Editor), the first major component of QPME, provides a graphical tool for modeling using QPNs. It offers a user-friendly interface enabling the user to quickly and easily construct QPN models. QPE is based on <a href="http://www.eclipse.org/gef/">GEF (Graphical Editing Framework)</a> - an Eclipse sub-project. GEF is an open source framework dedicated to providing a rich, consistent graphical editing environment for applications on the Eclipse platform. As a GEF application, QPE is written in pure Java and runs on all operating systems officially supported by the Eclipse platform. This includes Windows, Linux, Solaris, HP-UX, IBM AIX and Apple Mac OS among others, making QPE widely accessible.
</p>

<p>
Internally, being a GEF application, QPE is based on the model-view-controller architecture. The model in our case is the QPN being defined, the views provide graphical representations of the QPN, and finally the controller connects the model with the views, managing the interactions among them. QPN models created with QPE can be stored on disk as XML documents. QPE uses its own XML schema based on PNML with some changes and extensions to support the additional constructs available in QPN models.
</p>

<p>
A characterizing feature of QPE is that it allows token colors to be defined globally for the whole QPN instead of on a per-place basis. This feature was motivated by the fact that in QPNs typically the same token color (type) is used in multiple places. Instead of having to define the color multiple times, the user can define it one time and then reference it in all places where it is used. This saves time, makes the model definition more compact, and last but not least, it makes the modeling process less error-prone since references to the same token color are specified explicitly.
</p>

<!--
In ordinary Petri nets there are tokens that are passed through the net. In Colored Petri Nets, there are multiple types of Tokens these are called Colors. Usually these Colors are always defined for each Place and not throughout the net. This is no big deal, but in the course of working on this thesis I became convinced that defining the colors for an entire net would make the resulting nets a lot more humanly readable and avoid the need of defining a lot of colors over and over again. In order to define colors on a per net basis the Places were modified to operate using Color References instead of Colors themselves. Unfortunately this concept made it impossible to contribute a PNML-schema for the language used in this tool, since extending at this point was not possible at the time of which the internal Format was defined.
-->

<!--
<p>
Further details on the implementation of QPE can be found in \cite{Du2006-QPE}.
</p>
-->

<h3>QPE User Interface</h3>

<h4>QPE Main Window</h4>

<p>
Figure 1 shows the QPE main window, which is comprised of four views: <span class="GUIElement">Main Editor View</span>, <span class="GUIElement">Outline View</span>, <span class="GUIElement">Properties View</span> and <span class="GUIElement">Console View</span>. In the following, we take a brief look at each of these views. After that, we show how QPN models are constructed in QPE.
</p>

<div class="caption">
<img border="0" src=".\images\QPE-Main.jpg" alt="QPE Main Window" /> <br/>
Figure 1: QPE Main Window
</div>

<h5>Main Editor View</h5>

<p>
The <span class="GUIElement">Main Editor View</span> is made up of <span class="GUIElement">Net Editor</span>, <span class="GUIElement">Color Editor</span> and <span class="GUIElement">Palette</span>. The <span class="GUIElement">Net Editor</span> displays the graphical representation of the currently edited QPN. It provides multiple document interface using tabs, so that multiple QPN models can be edited at the same time. The <span class="GUIElement">Color Editor</span> is used to define the global list of token colors available for use in the places of the QPN. Finally, the <span class="GUIElement">Palette</span> displays the set of QPN elements that are used to build QPN models.
</p>

<h5>Outline View</h5>

<p>
The <span class="GUIElement">Outline View</span> provides a summary of the content of the currently active <span class="GUIElement">Net Editor</span>. It lists the elements of the QPN model displayed in the latter and makes it easy to find an element based on its name. When an element is selected in the <span class="GUIElement">Outline View</span>, it is automatically selected in the <span class="GUIElement">Net Editor</span> as well, and the canvas is scrolled to its position so that the user can see it. This feature is especially useful in large QPN models.
</p>

<h5>Properties View</h5>

<p>
The <span class="GUIElement">Properties View</span> enables the user to edit the properties of the currently selected element in the <span class="GUIElement">Net Editor</span>. The content of this view depends on the type of the selected element.
</p>

<!--
Basically it consists of direct data such as name of the element and general properties such as departure discipline in places and a table containing color-ref information when dealing with places or mode definitions with transitions. Depending on the type of place or transitions the number and type of global and table properties may vary. The main concept however is the same. In order to add a mode or color-ref to an element, the add-button underneath the table is used. When defining color-refs for places you have to keep in mind that this button is deactivated if every color defined for the net has already been added to the current place. One of the most common reasons for this will probably be that no colors have been defined in a new net. In order to add additional color-ref you have to create new colors first.
 
Each color-ref or mode has multiple child attributes. These are edited by clicking inside the table. If the value is editable an appropriate editor will let the user edit the value in-place. If an invalid value was entered when loosing focus the original value will automatically be restored and no change is made to the document itself. If a value is valid, the document is modified which will instantly result in the dirty-state of the document being changed, which is signaled by a small asterisk in the editors tab.
-->

<h5>Console View</h5>

<p>
The <span class="GUIElement">Console View</span> is used to display output from QPE extensions and plug-ins such as SimQPN. For example, SimQPN uses the <span class="GUIElement">Console View</span> to display progress updates during a simulation run as well as the results from the simulation output data analysis.
</p>

<h4>Constructing QPN Models</h4>

<p>
The first thing that has to be done when constructing a QPN model is to define the global list of colors that will be available for use in the places of the QPN. As already mentioned, colors are defined using the <span class="GUIElement">Color Editor</span> in the <span class="GUIElement">Main Editor View</span>. The <span class="GUIElement">Color Editor</span>, shown in Figure 2, is opened by selecting the <span class="GUIElement">Colors</span> tab at the bottom of the <span class="GUIElement">Main Editor View</span>.
</p>

<div class="caption">
<img border="0" src=".\images\QPE-ColorEditor.jpg" alt="QPE Color Editor" /> <br/>
Figure 2: QPE Color Editor
</div>

<p>
The <span class="GUIElement">Color Editor</span> consists of a table showing the currently defined colors and two buttons at the bottom of the table for adding and deleting colors. The delete button is only enabled when a color is selected. Each color has three attributes - <span class="GUIElement">Name</span>, <span class="GUIElement">Real Color</span> and <span class="GUIElement">Description</span>. These attributes can be edited by clicking inside the table. The <span class="GUIElement">Name</span> attribute provides a unique identifier of each color that can be used as a reference to the latter inside the places of the QPN. The <span class="GUIElement">Real Color</span> is used to make it easier to visually distinguish between different colors when referencing them. The <span class="GUIElement">Description</span> attribute defines the semantics of the entity modeled using the respective token color.
</p>

<p>
Once needed colors have been defined, the user can start putting together the QPN model. In order to do this the user has to switch back to the <span class="GUIElement">Net Editor</span> tab of the <span class="GUIElement">Main Editor View</span>. QPN models are built using the set of QPN elements available in the <span class="GUIElement">Palette</span>. In order to add an element to the model the user has to select it in the <span class="GUIElement">Palette</span> and then click inside the canvas of the <span class="GUIElement">Net Editor</span>. The following QPN elements are currently available in the <span class="GUIElement">Palette</span>: <span class="GUIElement">Ordinary Place</span>, <span class="GUIElement">Queueing Place</span>, <span class="GUIElement">Subnet Place</span>, <span class="GUIElement">Immediate Transition</span>, <span class="GUIElement">Timed Transition</span> and <span class="GUIElement">Connection</span>. The <span class="GUIElement">Connection</span> element is used to create connections between places and transitions. A connection is created by selecting the <span class="GUIElement">Connection</span> element and then dragging the mouse pointer from the input element to the output element.
</p>

<p>
The attributes of a QPN element (place or transition) can be edited by selecting the element and using the <span class="GUIElement">Properties View</span>. Depending on the type of element selected, different attributes are configurable.
</p>


<h5>Attributes of Ordinary Places</h5>

<ul>
<li><span class="GUIElement bold">Name:</span> Name of the ordinary place.</li>
<li><span class="GUIElement bold">Departure Discipline:</span> NORMAL or FIFO (First-In-First-Out). The former implies that tokens become available for output transitions immediately upon arrival just like in conventional QPN models. The latter implies that tokens become available for output transitions in the order of their arrival, i.e. a token can leave the place/depository only after all tokens that have arrived before it have left, hence the term FIFO. Departure disciplines are an extension to the QPN modeling formalism introduced in QPME. For more details refer to the paper <a href="http://dx.doi.org/10.1109/TSE.2006.69">"Performance Modeling and Evaluation of Distributed Component-Based Systems Using Queueing Petri Nets".</a></li>
<li> <span class="GUIElement bold">Colors:</span> Token colors allowed in this place. For each token color the following parameters can be configured:</li>
  <ul>
    <li><span class="GUIElement bold">Name:</span> Name of the color as defined in the <span class="GUIElement">Color Editor</span>.</li>
    <li><span class="GUIElement bold">Initial:</span> Initial number of tokens of the respective color in the place (in the initial marking of the QPN).</li>
    <li><span class="GUIElement bold">Max:</span> Maximum number of tokens of the respective color allowed in the place.</li>
  </ul>
</ul>


<h5>Attributes of Queueing Places</h5>

<ul>
<li><span class="GUIElement bold">Name:</span> Same as for ordinary place.</li>
<li><span class="GUIElement bold">Departure Discipline:</span> Same as for ordinary place.</li>
<li><span class="GUIElement bold">Scheduling Strategy:</span> The scheduling strategy (or queueing discipline) determines the order in which tokens are served in the queue. The following values are currently allowed:</li>
  <ul>
    <li><span class="GUIElement bold">FCFS:</span> First-Come-First-Served.</li>
    <li><span class="GUIElement bold">PS:</span> Processor-Sharing.</li>
    <li><span class="GUIElement bold">IS:</span> Infinite-Server.</li>
    <li><span class="GUIElement bold">PRIO:</span> Priority scheduling.</li>
    <li><span class="GUIElement bold">RANDOM:</span> Random scheduling.</li>
  </ul>
<li><span class="GUIElement bold">Number of Servers:</span> Number of servers in the queueing station (queue) of the place.</li>
<li><span class="GUIElement bold">Colors:</span> Token colors allowed in this place. For each token color the following parameters can be configured:</li>
  <ul>
    <li><span class="GUIElement bold">Name:</span> Same as for ordinary place.</li>
    <li><span class="GUIElement bold">Initial:</span> Same as for ordinary place.</li>
    <li><span class="GUIElement bold">Max:</span> Same as for ordinary place.</li>
    <li><span class="GUIElement bold">Ranking:</span></li>
    <li><span class="GUIElement bold">Priority:</span> Used for <span class="GUIElement">Priority</span> scheduling.</li>
    <li><span class="GUIElement bold">Distribution:</span> Distribution of the token inter-arrival time.</li>
    <li><span class="GUIElement bold">p1:</span> 1st parameter of the distribution.</li>
    <li><span class="GUIElement bold">p2:</span> 2nd parameter of the distribution (if applicable).</li>
    <li><span class="GUIElement bold">p3:</span> 3rd parameter of the distribution (if applicable).</li>
    <li><span class="GUIElement bold">Input File:</span> Input file for empirical distribution.</li>
  </ul>
</ul>


<p>
Table 1 shows a list of the currently supported distribution functions and their respective input parameters.
</p>

<div class="center">
<table style="width: 60%; text-align: center;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<th style="vertical-align: top;">Distribution</th>
<th style="vertical-align: top;">p1</th>
<th style="vertical-align: top;">p2</th>
<th style="vertical-align: top;">p3</th>
</tr>
<tr>
<td style="vertical-align: top;">Beta</td>
<td style="vertical-align: top;">alpha</td>
<td style="vertical-align: top;">beta</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">BreitWigner</td>
<td style="vertical-align: top;">mean</td>
<td style="vertical-align: top;">gamma</td>
<td style="vertical-align: top;">cut</td>
</tr>
<tr>
<td style="vertical-align: top;">BreitWignerMeanSquare</td>
<td style="vertical-align: top;">mean</td>
<td style="vertical-align: top;">gamma</td>
<td style="vertical-align: top;">cut</td>
</tr>
<tr>
<td style="vertical-align: top;">ChiSquare</td>
<td style="vertical-align: top;">freedom</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;"> </td>
<td style="vertical-align: top;"> </td>
<td style="vertical-align: top;"> </td>
<td style="vertical-align: top;"> </td>
</tr>
<tr>
<td style="vertical-align: top;">Gamma</td>
<td style="vertical-align: top;">alpha</td>
<td style="vertical-align: top;">lambda</td>
<td style="vertical-align: top;">na</td>
</tr>

<tr>
<td style="vertical-align: top;">Hyperbolic</td>
<td style="vertical-align: top;">alpha</td>
<td style="vertical-align: top;">beta</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">Exponential</td>
<td style="vertical-align: top;">lambda</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">ExponentialPower</td>
<td style="vertical-align: top;">tau</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">Logarithmic</td>
<td style="vertical-align: top;">p</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">Normal</td>
<td style="vertical-align: top;">mean</td>
<td style="vertical-align: top;">stddev</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">StudentT</td>
<td style="vertical-align: top;">freedom</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">Uniform</td>
<td style="vertical-align: top;">min</td>
<td style="vertical-align: top;">max</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">VonMises</td>
<td style="vertical-align: top;">freedom</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">Empirical</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
</tr>
<tr>
<td style="vertical-align: top;">Deterministic</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
<td style="vertical-align: top;">na</td>
</tr>
</tbody>
</table>
<div class="caption">
Table 1: Supported distributions and their input parameters.
</div>
</div>

<p>
<span class="GUIElement">Empirical</span> distributions are supported in the following way. The user is expected to provide a probability distribution function (PDF), specified as an array of positive real numbers (histogram). The array is read from an external text file whose name and location are initialized using the <span class="GUIElement">Input File</span> parameter. Successive values in the text file must be delimited using semicolon ';' characters. A cumulative distribution function (CDF) is constructed from the PDF and inverted using a binary search for the nearest bin boundary and a linear interpolation within the bin (resulting in a constant density within each bin).
</p>

<h5>Attributes of Subnet Places</h5>

<ul>
<li><span class="GUIElement bold">Name:</span> Name of the subnet place.</li>
<!--  %TODO: See if the attributes below are applicable to subnet places? -->
<li><span class="GUIElement bold">Departure Discipline:</span> NORMAL or FIFO (First-In-First-Out). The former implies that tokens become available for output transitions immediately upon arrival just like in conventional QPN models. The latter implies that tokens become available for output transitions in the order of their arrival, i.e. a token can leave the place/depository only after all tokens that have arrived before it have left, hence the term FIFO. Departure disciplines are an extension to the QPN modeling formalism introduced in QPME. For more details refer to the paper <a href="http://dx.doi.org/10.1109/TSE.2006.69">"Performance Modeling and Evaluation of Distributed Component-Based Systems Using Queueing Petri Nets".</a></li>
<li><span class="GUIElement bold">Colors:</span> Token colors allowed in this place. For each token color the following parameters can be configured:</li>
  <ul>
    <li><span class="GUIElement bold">Name:</span> Name of the color as defined in the <span class="GUIElement">Color Editor</span>.</li>
    <li><span class="GUIElement bold">Initial:</span> Initial number of tokens of the respective color in the place (in the initial marking of the QPN).</li>
    <li><span class="GUIElement bold">Max:</span> Maximum number of tokens of the respective color allowed in the place.</li>
  </ul>
</ul>


<h5>Attributes of Immediate Transitions</h5>

<ul>
<li><span class="GUIElement bold">Name:</span> Name of the immediate transition.</li>
<li><span class="GUIElement bold">Priority:</span> Firing priority.</li>
<li><span class="GUIElement bold">Firing Weight:</span> Relative firing frequency of transition.</li>
<li><span class="GUIElement bold">Modes:</span> Modes in which the transition can fire. For each mode the following parameters can be configured:</li>
  <ul>
    <li><span class="GUIElement bold">Name:</span> Name of the mode.</li>
    <li><span class="GUIElement bold">Real Color:</span> Used to make it easier to visually distinguish between different modes when defining the incidence functions.</li>
    <li><span class="GUIElement bold">Firing Weight:</span> Relative firing frequency of the mode.</li>
  </ul>
</ul>

<h5>Attributes of Timed Transitions</h5>

<ul>
<li><span class="GUIElement bold">Name:</span> Name of the timed transition.</li>
<li><span class="GUIElement bold">Priority:</span> Firing priority.</li>
<li><span class="GUIElement bold">Modes:</span> Modes in which the transition can fire. For each mode the following parameters can be configured:</li>
  <ul>
    <li><span class="GUIElement bold">Name:</span> Name of the mode.</li>
    <li><span class="GUIElement bold">Real Color:</span> Used to make it easier to visually distinguish between different modes when defining the incidence functions.</li>
    <li><span class="GUIElement bold">Mean Firing Delay:</span> Firing delay of the mode.</li>
  </ul>
</ul>

<!--
In addition to these standard options there are menu entries for zooming. This feature is especially useful when dealing with large nets. The same functionality can be achieved by pressing the CTRL key and using the scroll-wheel of the mouse.
-->

<h5>Defining Transition Incidence Functions</h5>

<p>
Transition incidence functions in QPE are defined using the <span class="GUIElement">Incidence Function Editor</span> shown in Figure 3.
</p>

<div class="caption">
<img border="0" src=".\images\QPE-IncFuncEditor.jpg" alt="QPE Incidence Function Editor" /> <br/>
Figure 3: QPE Incidence Function Editor
</div>

<p>
The <span class="GUIElement">Incidence Function Editor</span> can be opened by double-clicking a transition or right-clicking it and using the context menu, or alternatively using the <span class="GUIElement">Properties</span> view. Once opened the <span class="GUIElement">Incidence Function Editor</span> displays the transition input places on the left, the transition modes in the middle and the transition output places on the right. Each place (input or output) is displayed as a rectangle containing a separate circle for each token color allowed in the place. Using the <span class="GUIElement">Connection</span> tool in the <span class="GUIElement">Palette</span>, the user can create connections from token colors of input places to modes or from modes to token colors of output places. If a connection is created between a token color of a place and a mode, this means that when the transition fires in this mode, tokens of the respective color are removed from the place. Similarly, if a connection is created between a mode and a token color of an output place, this means that when the transition fires in this mode, tokens of the respective color are deposited in the place. Each connection can be assigned a weight by clicking on it and using the <span class="GUIElement">Properties</span> view. The weight, displayed as label next to the connection line, is interpreted as the number of tokens removed/deposited in the place when the transition fires in the respective mode.
</p>

<p style="font-style:italic;">
<b>Note:</b> Due to an Eclipse/GEF bug, currently when opening the <span class="GUIElement">Incidence Function Editor</span> nothing is displayed inside its window. To make Eclipse display the expected elements, the user should click inside the window and drag the mouse pointer.
</p>

<h5>Behavior of Copy and Paste in QPE</h5>

<p>
The implementation of the standard <span class="GUIElement">Copy</span> and <span class="GUIElement">Paste</span> operations might seem obvious in most editors, however, things are a little more complicated in the case of QPE. This is because elements in QPNs are interdependent and copying an element from one location to another might not make sense without adjusting the element or copying its associated elements along with it. There is a difference in how this is handled when an element is pasted inside the same document or when it is pasted into another document.
</p>

<p>
If an element is copied and pasted into the same document, a replica of the element is inserted next to source element with a little offset so that the user can distinguish between the two. Any connections of the copied element are replicated as well. If multiple elements are copied, any connections between them are replicated as connections between the replicas of the copied elements. If connections between a copied element and a non-copied element exist, a connection between the replica of the copied element and the non-copied element is created. When transitions are copied, the newly created replicas have identical incidence functions as the source transitions.
</p>

<p>
The behavior of <span class="GUIElement">Copy</span> and <span class="GUIElement">Paste</span> is slightly different when copying elements from one document to another. When a place is copied, it might be that its referenced colors are not defined in the target document. Therefore, any color definitions referenced by a copied element, have to be created in the target document. To avoid name conflicts, the names of copied colors are prefixed with the name of the source document. Another difference is in the way connections are treated. Connections between copied elements and non-copied elements are not copied in the target document, since this does not make sense in this case. Therefore, a transition might lose some connections when copied and its incidence function has to be adjusted accordingly.
</p>

<br/>
<hr/>
<p style="text-align:center;" /> Copyright (c) 2006 Samuel Kounev and Christofer Dutz

</body>
</html>
