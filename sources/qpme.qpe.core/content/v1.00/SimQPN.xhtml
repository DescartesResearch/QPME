<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Model Analysis using SimQPN</title>
  <link rel="stylesheet" href="shared.css" type="text/css" />
</head>

<body>
<h1>QPME User's Guide</h1>
<h2>Model Analysis using SimQPN</h2>

<h3>Overview</h3>

<p>
QPME provides a discrete-event simulator, SimQPN, that can be used to analyze QPN models built in QPE. SimQPN is extremely light-weight and has been implemented in Java to provide maximum portability and platform-independence. It can be run either as Eclipse plugin in QPE or as a standalone Java application. Thus, even though QPE is limited to Eclipse-supported platforms, SimQPN can be run on any platform for which Java Runtime Environment (JRE) 1.1 or higher is available. This makes it possible to design a model on one platform (e.g. Windows) using QPE and then analyze it on another platform (e.g. Solaris) using SimQPN.
</p>

<p>
SimQPN simulates QPNs using a sequential algorithm based on the event-scheduling approach for simulation modeling. Being specialized for QPNs, it simulates QPN models directly and has been designed to exploit the knowledge of the structure and behavior of QPNs to improve the efficiency of the simulation. Therefore, SimQPN provides much better performance than a general purpose simulator would provide, both in terms of the speed of simulation and the quality of output data provided.
</p>

<p>
In the following, SimQPN is presented from the user's perspective. For information on SimQPN' internal implementation details as well as precise specification of the analysis techniques it supports refer to the paper <a href="http://dx.doi.org/10.1016/j.peva.2005.03.004">"SimQPN - a tool and methodology for analyzing queueing Petri net models by means of simulation"</a>. It should be noted that SimQPN currently supports most, but not all of the QPN features that can be configured in QPE. The reason for not limiting QPE to only those features supported by SimQPN is that QPE should also be usable as a standalone QPN editor and as such the QPN features it offers should not be limited to any particular analysis tool.
</p>

<h4>Supported QPN Features</h4>

<p>
SimQPN currently supports the following scheduling strategies for queues inside queueing places:
</p>

<ul>
<li>First-Come-First-Served (FCFS)</li>
<li>Processor-Sharing (PS)</li>
<li>Infinite Server (IS)</li>
</ul>

<p>
The following service time distributions are supported (input parameters of distributions are shown in brackets):
</p>

<ul>
<li>Beta (alpha, beta)</li>
<li>BreitWigner (mean, gamma, cut)</li>
<li>BreitWignerMeanSquare (mean, gamma, cut)</li>
<li>ChiSquare (freedom)</li>
<li>Gamma (alpha, lambda)</li>
<li>Hyperbolic (alpha, beta)</li>
<li>Exponential (lambda)</li>
<li>ExponentialPower (tau)</li>
<li>Logarithmic (p)</li>
<li>Normal (mean, stddev)</li>
<li>StudentT (freedom)</li>
<li>Uniform (min, max)</li>
<li>VonMises (freedom)</li>
<li>Empirical</li>
<!-- <li>Deterministic</li> -->
</ul>

<p>
Empirical distributions are supported in the following way. The user is expected to provide a probability distribution function (PDF), specified as an array of positive real numbers (histogram). A cumulative distribution function (CDF) is constructed from the PDF and inverted using a binary search for the nearest bin boundary and a linear interpolation within the bin (resulting in a constant density within each bin). The next version of SimQPN will also include support for deterministic distributions.
</p>

<p>
Timed transitions are currently not supported, however, in most cases a timed transition can be approximated by a serial network consisting of an immediate transition, a queueing place and a second immediate transition.
</p>

<!--
The spectrum of scheduling strategies and service time distributions supported by SimQPN will be extended. Support for timed transitions and immediate queueing places is also planned and will be included in a future release.
-->

<p>
A novel feature of SimQPN is the introduction of the so-called <span style="font-style:italic;">departure disciplines</span>.<!--This is an extension of the QPN modeling formalism introduced to address a common drawback of QPN models (and of Petri nets in general), i.e. tokens inside ordinary places and depositories are not distinguished in terms of their order of arrival.--> The latter are defined for ordinary places or depositories and determine the order in which arriving tokens become available for output transitions. Two departure disciplines are currently supported, Normal (used by default) and First-In-First-Out (FIFO). The former implies that tokens become available for output transitions immediately upon arrival just like in conventional QPN models. The latter implies that tokens become available for output transitions in the order of their arrival, i.e. a token can leave the place/depository only after all tokens that have arrived before it have left, hence the term FIFO. For an example of how this feature can be exploited and the benefits it provides we refer the reader to the paper <a href="http://dx.doi.org/10.1109/TSE.2006.69">"Performance Modeling and Evaluation of Distributed Component-Based Systems Using Queueing Petri Nets".</a>
</p>

<h4>Simulation Output Data Analysis</h4>

<h5>Modes of Data Collection</h5>

<p>
SimQPN offers the ability to configure what data exactly to collect during the simulation and what statistics to provide at the end of the run. This can be specified for each place (ordinary or queueing) of the QPN. The user can choose one of four modes of data collection. The higher the mode, the more information is collected and the more statistics are provided. Since collecting data costs CPU time, the more data is collected, the slower the simulation would run. Therefore, by configuring data collection modes, the user can make sure that no time is wasted collecting unnecessary data and, in this way, speed up the simulation.
</p>

<p>
<span class="bold">Mode 1:</span> This mode considers only token throughput data, i.e. for each queue, place or depository the token arrival and departure rates are estimated for each color.
</p>

<p>
<span class="bold">Mode 2:</span> This mode adds token population and utilization data, i.e. for each queue, place and depository the following data is provided on a per-color basis:
</p>
<ul>
<li>Minimum/maximum number of tokens.</li>
<li>Average number of tokens.</li>
<li>Mean color utilization, i.e. the fraction of time that there is a token of the respective color inside the queue/place/depository.</li>
</ul>


<p>
For queues, in addition to the above, the overall queue utilization is reported (i.e. the fraction of time that there is a token of any color inside the queue).
</p>

<p>
<span class="bold">Mode 3:</span> This mode adds residence time data, i.e. for each queue, place and depository the following additional data is provided on a per-color basis:
</p>
<ul>
<li>Minimum/maximum observed token residence time.</li>
<li>Mean and standard deviation of observed token residence times.</li>
<li>Estimated steady state mean token residence time.</li>
<li>Confidence interval (c.i.) for the steady state mean token residence time at a user-specified significance level.</li>
</ul>

<p>
<span class="bold">Mode 4:</span> provides all of the above and additionally dumps observed token residence times to files.
</p>

<h5>Steady State Analysis</h5>

<p>
SimQPN supports two methods for estimation of the steady state mean residence times of tokens inside the queues, places and depositories of the QPN. These are the well-known <span style="font-style:italic;">method of independent replications</span> (in its variant referred to as <span style="font-style:italic;">replication/deletion approach</span>) and the classical <span style="font-style:italic;">method of non-overlapping batch means</span>. Both of them can be used to provide point and interval estimates of the steady state mean token residence time. The method of Welch is used for determining the length of the initial transient (warm-up period). <!-- We have followed the rules in \cite{LaKe2000-Simulation-Modeling-and-Analysis} for choosing the number of replications, their length and the window size. SimQPN allows the user to configure the first two parameters and then automatically plots the moving averages for different window sizes. --> For users that would like to use different methods for steady state analysis (for example <a href="http://portal.acm.org/citation.cfm?doid=1044322.1044325">ASAP3</a>), SimQPN can be configured to output observed token residence times to files (mode 4), which can then be used as input to external analysis tools.
</p>

<p>
Simulation experiments with SimQPN usually comprise two stages: stage 1 during which the length of the initial transient is determined, and stage 2 during which the steady-state behavior of the system is simulated and analyzed. SimQPN utilizes the <a href="http://dsd.lbl.gov/~hoschek/colt/">Colt</a> open source library for high performance scientific and technical computing in Java, developed at CERN. In SimQPN, Colt is primarily used for random number generation and, in particular, its implementation of the <span style="font-style:italic;">Mersenne Twister</span> random number generator is employed.
</p>

<!--
For FCFS queues, SimQPN also supports <span style="font-style:italic;">indirect estimation</span> of the steady state token residence times according to the variance-reduction technique in \cite{CaLa1980-Variance_Reduction}.
-->

<!--
After a simulation-run is done the result information is stored within meta-attributes inside the original model. This way it is possible to save results and to make them available to future plug-ins. Plug-ins which for example could read the SimQPN data and display it within a special simulation report.
-->

<h3>Working with SimQPN</h3>

<h4>Run Configuration Wizard</h4>

<p>
SimQPN can be launched by choosing <span class="GUIElement bold">SimQPN</span> from the <span class="GUIElement bold">Tools</span> menu in QPE. This opens the <span class="GUIElement bold">Run Configuration Wizard</span>. The latter consists of three dialog windows:
</p>
<ol>
<li><span class="GUIElement bold">Select Run Configuration</span></li>
<li><span class="GUIElement bold">Simulation Run Configuration</span></li>
<li><span class="GUIElement bold">Configuration Parameters for the chosen Analysis Method</span></li>
</ol>

<p>
Before a QPN model can be simulated, a <span class="GUIElement bold">configuration</span> must be created which encapsulates all input parameters required for the simulation. The <span class="GUIElement bold">Select Run Configuration</span> dialog window (Figure 1) can be used to create new configurations or delete existing ones. All parameters belonging to a configuration are stored as meta-attributes in the model's XML file.
</p>

<div class="caption">
<img border="0" src=".\images\SimQPN-WizardD1.jpg" alt="Select Run Configuration Dialog Window" /> <br/>
Figure 1: Select Run Configuration Dialog Window
</div>

<p>
When creating a new configuration, the user is first asked to select the analysis method that will be used for analysis of the output data from the simulation. Three analysis methods are currently supported:
</p>

<ol>
<li><span class="GUIElement bold">Batch Means:</span> Steady-state analysis using the method of non-overlapping batch means.</li>
<li><span class="GUIElement bold">Replication/Deletion:</span> Steady-state analysis using the method of independent replications in its variant referred to as replication/deletion approach.</li>
<li><span class="GUIElement bold">Method of Welch:</span> Analysis of the length of the initial transient (warm-up period) using the method of Welch.</li>
</ol>

<p>
Steady-state analysis is applied to the observed token residence times at places, queues and depositories of the QPN.
</p>

<h5>General Run Configuration Parameters</h5>

<p>
After a configuration has been created it can be used by selecting it and clicking on the <span class="GUIElement bold">Next</span> button in the <span class="GUIElement bold">Select Run Configuration</span> dialog window. This opens the <span class="GUIElement bold">Simulation Run Configuration</span> dialog window (Figure 2), which allows the user to configure the following general simulation parameters:
</p>

<div class="caption">
<img border="0" src=".\images\SimQPN-WizardD2.jpg" alt="Simulation Run Configuration Dialog Window" /> <br/>
Figure 2: Simulation Run Configuration Dialog Window
</div>

<ul>
<li><span class="GUIElement bold">Warm up period:</span> Length of the warm up period (initial transient) of the simulation run in model time.</li>
<li><span class="GUIElement bold">Max total run length:</span> Maximum total length (including <span class="GUIElement bold">warm up period</span>) of the simulation run in model time.</li>
<li><span class="GUIElement bold">Simulation stopping criterion:</span> Criterion for determining when the simulation run should be stopped. Three values are allowed:
<ul>
<li><span class="GUIElement bold">Fixed sample size</span></li>
<li><span class="GUIElement bold">Sequential / Absolute precision</span></li>
<li><span class="GUIElement bold">Sequential / Relative precision</span></li>
</ul>
<span class="GUIElement bold">Fixed sample size</span> means that the simulation is run until the <span class="GUIElement bold">max total run length</span> has been reached. <span class="GUIElement bold">Sequential / Absolute precision</span> or <span class="GUIElement bold">Sequential / Relative precision</span> means that the length of the simulation is increased sequentially from one checkpoint to the next, until enough data has been collected to provide estimates of residence times with a given user-specified precision. The precision is defined as an upper bound on the confidence interval half length. It can be specified either as an absolute value (<span class="GUIElement bold">Sequential / Absolute precision</span>) or as a percentage relative to the mean residence time (<span class="GUIElement bold">Sequential / Relative precision</span>). Note that if the <span class="GUIElement bold">Replication/Deletion</span> method or the <span class="GUIElement bold">Method of Welch</span> has been chosen, the stopping criterion is automatically set to <span class="GUIElement bold">fixed sample size</span> because the sequential stopping criteria are not applicable to these methods.
</li>
<li><span class="GUIElement bold">Time between stop checks:</span> Specifies how often (in model time) the simulator checks if the conditions of the stopping criterion have been fulfilled to determine if the simulation run should be stopped.</li>
<li><span class="GUIElement bold">Time before initial heart beat:</span> Time at which the first simulator progress update (heart beat) is done (in model time).</li>
<li><span class="GUIElement bold">Seconds between heart beats:</span> Specifies how often simulator progress updates (heart beats) are done.
</li>
<li><span class="GUIElement bold">Verbosity level:</span> Specifies how much details the simulator should output during the simulation. Verbosity level is an integer from 0 to 3.</li>
<li><span class="GUIElement bold">Output directory:</span> Directory in which simulator output files should be stored, including results from analysis of the simulation output data.
</li>
</ul>
  
<p>  
After the user has finished configuring the parameters in the <span class="GUIElement bold">Simulation Run Configuration</span> dialog window and clicks on the <span class="GUIElement bold">Next</span> button, the next dialog window depends on the chosen analysis method. In the following, each of them is discussed in turn.
</p>

<!--
TODO: Fix SimQPN-WizardD3a, SimQPN-WizardD3b, SimQPN-WizardD3c images to improve quality (try generating them on DELL).
-->

<h5>Configuration Parameters for Batch Means Method</h5>

<div class="caption">
<img border="0" src=".\images\SimQPN-WizardD3a.jpg" alt="Configuration Parameters for Batch Means Method" /> <br/>
Figure 3: Configuration Parameters for Batch Means Method
</div>

<p>
Figure 3 shows the dialog window for the batch means method. The following parameters must be configured for every ordinary place, queue or depository:
</p>

<ul>
<li/><span class="GUIElement bold">statsLevel:</span> Specifies the mode of data collection - from 1 to 4. If set to 0, no data is collected for the respective place and no statistics are provided at the end of the run.
<li/><span class="GUIElement bold">signLev:</span> Specifies the significance level of the confidence intervals to be provided for the average token residence times.
<li/><span class="GUIElement bold">reqAbsPrc:</span> If <span class="GUIElement bold">Sequential / Absolute precision</span> stopping criterion has been chosen, this field specifies the absolute precision required. Simulation is not stopped before enough data has been collected to provide confidence intervals for token residence times at the respective place with half widths not exceeding <span class="GUIElement bold">reqAbsPrc</span>.
<li/><span class="GUIElement bold">reqRelPrc:</span> If <span class="GUIElement bold">Sequential / Relative precision</span> stopping criterion has been chosen, this field specifies the relative precision required. Simulation is not stopped before enough data has been collected to provide confidence intervals for token residence times at the respective place with half widths not exceeding (reqRelPrc*100%) percent of the corresponding mean values.
<li/><span class="GUIElement bold">batchSize:</span> Specifies the batch size used.
<li/><span class="GUIElement bold">minBatches:</span> Minimum number of batches required for steady state statistics. If set to 0, no steady state analysis is performed for the respective token color.
<li/><span class="GUIElement bold">numBMeansCorlTested:</span> If set greater than 0, the first <span class="GUIElement bold">numBMeansCorlTested</span> batch means observed from the beginning of the steady state period are tested for autocorrelation to determine if the batch size is sufficient. If the test fails, the batch size is increased repeatedly until the test is passed. If set to 0, no autocorrelation test is performed.
</ul>

<p> 
The above parameters are specified on a per-color basis for every place of the QPN. For queueing places the parameters are set separately for the queue and depository of the place. Note that the parameters <span class="GUIElement bold">signLev</span>, <span class="GUIElement bold">reqAbsPrc</span>, <span class="GUIElement bold">reqRelPrc</span>, <span class="GUIElement bold">batchSize</span>, <span class="GUIElement bold">minBatches</span> and <span class="GUIElement bold">numBMeansCorlTested</span> are only enabled for places where <span class="GUIElement bold">statsLevel</span> is set to be greater than or equal to 3. Otherwise, no steady state analysis is performed and these parameters do not make sense.
</p>

<h5>Configuration Parameters for Replication/Deletion Method</h5>

<div class="caption">
<img border="0" src=".\images\SimQPN-WizardD3b.jpg" alt="Configuration Parameters for Replication/Deletion Method" /> <br/>
Figure 4: Configuration Parameters for Replication/Deletion Method
</div>

<p>
Figure 4 shows the dialog window for replication/deletion method. The following parameters must be configured for every ordinary place, queue or depository:
</p>

<ul>
<li/><span class="GUIElement bold">statsLevel:</span> Specifies the mode of data collection - from 1 to 4. If set to 0, no data is collected for the respective place and no statistics are provided at the end of the run.
<li/><span class="GUIElement bold">sighLevAvgST:</span> Specifies the significance level of the confidence intervals to be provided for the average token residence times.
</ul>
  
<p>
Note that the parameter <span class="GUIElement bold">sighLevAvgST</span> is only enabled for places where <span class="GUIElement bold">statsLevel</span> is set to be greater than or equal to 3. Otherwise, no statistics are gathered for token residence times. The number of replications performed is specified in the <span class="GUIElement bold">Select Run Configuration</span> dialog window (Figure 1).
</p>

<h5>Configuration Parameters for Method of Welch</h5>

<div class="caption">
<img border="0" src=".\images\SimQPN-WizardD3c.jpg" alt="Configuration Parameters for Method of Welch" /> <br/>
Figure 5: Configuration Parameters for Method of Welch
</div>

<p>
Figure 5 shows the dialog window for the method of Welch. The following parameters must be configured for every ordinary place, queue or depository:
</p>

<ul>
<li/><span class="GUIElement bold">statsLevel:</span> Specifies the mode of data collection - from 1 to 4. If set to 0, no data is collected for the respective place and it is excluded from the analysis.
<li/><span class="GUIElement bold">minObsrv:</span> Minimum number of observations required.
<li/><span class="GUIElement bold">maxObsrv:</span> Maximum number of observations considered. If set to 0, no data is collected for the respective token color and it is excluded from the analysis.
</ul>

<p>
Note that the parameters <span class="GUIElement bold">minObsrv</span> and <span class="GUIElement bold">maxObsrv</span> are only enabled for places where <span class="GUIElement bold">statsLevel</span> is set to be greater than or equal to 3. Otherwise, no statistics are gathered for token residence times. The number of replications performed is specified in the <span class="GUIElement bold">Select Run Configuration</span> dialog window (Figure 1).
</p>

<p>
For every token color, SimQPN computes the moving averages of observed token residence times for four different window sizes and stores them in text files in the <span class="GUIElement bold">output directory</span>. Output files are named as follows:
</p>

<p>
<span style="font-family: courier">WelchMovAvgST-&lt;TYPE&gt;&lt;NAME&gt;-col&lt;COLOR&gt;-win&lt;SIZE&gt;.txt</span>
</p>

<p>
where <span style="font-family: courier">&lt;TYPE&gt;</span> is <span style="font-family: courier">place</span>, <span style="font-family: courier">queue</span> or <span style="font-family: courier">depository</span>; <span style="font-family: courier">&lt;NAME&gt;</span> is the name of the respective place, queue or depository; and <span style="font-family: courier">&lt;SIZE&gt;</span> is the window size. The window sizes considered are <span style="font-family: courier">m / 4, m / 16, m / 32</span> and <span style="font-family: courier">m / 64</span>, where <span style="font-family: courier">m</span> is the actual number of observations.
</p>

<h4>SimQPN Command-Line Interface</h4>

<p>
Under construction...
</p>
<!--
TODO show how to start SimQPN from the command line
-->

<h3>Presentation of Simulation Results</h3>

<p>
When run inside QPE, SimQPN prints all results from the simulation output data analysis in the <span class="GUIElement bold">Console</span>. In addition, the results are stored in text files in the <span class="GUIElement bold">output directory</span>. <!-- Output files are named as follows: \\ TODO: mention file name format -->
</p>

<p>
For each ordinary place, queue or depository different amount of information is provided depending on the chosen data collection mode (<span class="GUIElement bold">statsLevel</span>). In this section, the presentation format of results from the different analysis methods is discussed.
</p>

<h4>Results from Batch Means Method</h4>

<p>
The excerpt below shows the format of results from the method of batch means for one queueing place (queue and depository) and one color.
</p>

<PRE>

REPORT for Queue : DBS-CPU----------------------------------------

Overall Queue Util=0.7571974116566562

------------------ Color=0 --------------------
arrivCnt=161471 deptCnt=161468
arrivThrPut=0.014308253925074151 deptThrPut=0.014307988089340334
meanTkPop=3.124693954462401 colUtil=0.7571974116566562
-----
meanST=218.3834439454382 stDevST=322.57718936648314

Steady State Statistics:
numBatchesST=201 batchSizeST=800 stDevStdStateMeanST=45.6472946669
90% c.i. = 218.61956343536986 +/- 5.320603897320468


REPORT for Depository : DBS-CPU-----------------------------------

------------------ Color=0 --------------------
arrivCnt=161468 deptCnt=161467
arrivThrPut=0.014307988089340334 deptThrPut=0.01430789947742906
meanTkPop=0.0 colUtil=0.0
-----
meanST=0.0 stDevST=0.0

Steady State Statistics:
numBatchesST=807 batchSizeST=200 stDevStdStateMeanST=0.0
90% c.i. = 0.0 +/- 0.0
</PRE>

<p>
The various quantities in the results report are defined as follows:
</p>

<ul>
<li/><span class="GUIElement bold">Overall Queue Util:</span> The probability that there is a token of any color in the queue.
<li/><span class="GUIElement bold">arrivCnt:</span> Total number of tokens of the respective color that arrived in the queue/depository during the run.
<li/><span class="GUIElement bold">deptCnt:</span> Total number of tokens of the respective color that departed from the queue/depository during the run.
<li/><span class="GUIElement bold">arrivThrPut:</span> Rate at which tokens of the respective color arrive at the queue/depository.
<li/><span class="GUIElement bold">deptThrPut:</span> Rate at which tokens of the respective color depart from the queue/depository.
<li/><span class="GUIElement bold">meanTkPop:</span> Mean number of tokens of the respective color in the queue/depository.
<li/><span class="GUIElement bold">colUtil:</span> The probability that there is a token of the respective color in the queue/depository.
<li/><span class="GUIElement bold">meanST:</span> Mean token residence (sojourn) time, i.e. time that tokens of the respective color spend in the queue/depository.
<li/><span class="GUIElement bold">stDevST:</span> Standard deviation of the token residence time.
<li/><span class="GUIElement bold">numBatchesST:</span> Number of batches of observations collected.
<li/><span class="GUIElement bold">batchSizeST:</span> Batch size used.
<li/><span class="GUIElement bold">stDevStdStateMeanST:</span> Standard deviation of the steady state residence time.
<li/><span class="GUIElement bold">90% c.i.:</span> 90% confidence interval for the steady state mean residence time.
</ul>
    
<h4>Results from Replication/Deletion Method</h4>

<p>
The excerpt below shows the format of results from the replication/deletion method for one queueing place (queue and depository) and one color.
</p>

<PRE>
REPORT for Queue : DBS-CPU----------------------------------------

numReplicationsUsed = 100 numTooShortRepls = 0
minRunLen=5000000.047045088 maxRunLen=5000175.44340017
avgRunLen=5000020.540000993 stDevRunLen=25.94565026505922
avgWallClockTime=1.18217999999 stDevWallClockTime=0.030668768043

meanQueueUtil=0.7574721018056024 stDevQueueUtil=0.0046913938556502

------------------ Color=0 --------------------
meanArrivThrPut[c]=0.0142910684137 meanDeptThrPut[c]=0.01429092841
stDevArrivThrPut[c]=6.38614705E-5 stDevDeptThrPut[c]=6.3797896E-5
minAvgTkPop[c]=2.876744782905197 maxAvgTkPop[c]=3.4270894141218826
meanAvgTkPop[c]=3.118214443226206 meanColUtil[c]=0.757472101805624
stDevAvgTkPop[c]=0.10659712560 stDevColUtil[c]=0.00469139385565026
-----
meanAvgST[c]=218.18885562939914 stDevAvgST[c]=7.15056639668919

90% c.i. = 218.18885562939914 +/- 1.1872797998046334


REPORT for Depository : DBS-CPU-----------------------------------

numReplicationsUsed = 100 numTooShortRepls = 0
minRunLen=5000000.047045088 maxRunLen=5000175.44340017
avgRunLen=5000020.540000993 stDevRunLen=25.94565026505922
avgWallClockTime=1.1821799999999 stDevWallClockTime=0.030668768043

------------------ Color=0 --------------------
meanArrivThrPut[c]=0.0142909284 meanDeptThrPut[c]=0.01429093507
stDevArrivThrPut[c]=6.379789E-5 stDevDeptThrPut[c]=6.376607356E-5
minAvgTkPop[c]=0.0 maxAvgTkPop[c]=0.0
meanAvgTkPop[c]=0.0 meanColUtil[c]=0.0
stDevAvgTkPop[c]=0.0 stDevColUtil[c]=0.0
-----
meanAvgST[c]=0.0 stDevAvgST[c]=0.0

90% c.i. = 0.0 +/- 0.0
</PRE>

<p>
The various quantities in the results report are defined as follows:
</p>

<DL>
  <DT><span class="GUIElement bold">numReplicationsUsed:</span></DT><DD>Total number of run replications used for steady state analysis.</DD>
  <DT><span class="GUIElement bold">numTooShortRepls:</span></DT><DD>This variable is currently not used, so it can be ignored.</DD>
  <DT><span class="GUIElement bold">minRunLen:</span></DT><DD>The minimum length of a run replication (in model time).</DD>
  <DT><span class="GUIElement bold">maxRunLen:</span></DT><DD>The maximum length of a run replication (in model time).</DD>
  <DT><span class="GUIElement bold">avgRunLen:</span></DT><DD>The average length of a run replication (in model time).</DD>
  <DT><span class="GUIElement bold">stDevRunLen:</span></DT><DD>The standard deviation of the run replication length (in model time).</DD>
  <DT><span class="GUIElement bold">avgWallClockTime:</span></DT><DD>The average duration of a run replication (in wall clock time).</DD>
  <DT><span class="GUIElement bold">stDevWallClockTime:</span></DT><DD>The standard deviation of the run replication duration (in wall clock time).</DD>
  <DT><span class="GUIElement bold">meanQueueUtil:</span></DT><DD>The mean queue utilization - probability that there is a token of any color in the queue.</DD>
  <DT><span class="GUIElement bold">stDevQueueUtil:</span></DT><DD>Standard deviation of the queue utilization measured from the run replications.</DD>
  <DT><span class="GUIElement bold">meanArrivThrPut:</span></DT><DD>Mean rate at which tokens of the respective color arrive at the queue/depository (arrival rate).</DD>
  <DT><span class="GUIElement bold">meanDeptThrPut:</span></DT><DD>Mean rate at which tokens of the respective color depart from the queue/depository (departure rate).</DD>
  <DT><span class="GUIElement bold">stDevArrivThrPut:</span></DT><DD>Standard deviation of the token arrival rate.</DD>
  <DT><span class="GUIElement bold">stDevDeptThrPut:</span></DT><DD>Standard deviation of the token departure rate.</DD>
  <DT><span class="GUIElement bold">minAvgTkPop:</span></DT><DD>Minimum average token population measured from the run replications.</DD>
  <DT><span class="GUIElement bold">maxAvgTkPop:</span></DT><DD>Maximum average token population measured from the run replications.</DD>
  <DT><span class="GUIElement bold">meanAvgTkPop:</span></DT><DD>Mean average token population measured from the run replications.</DD>
  <DT><span class="GUIElement bold">meanColUtil:</span></DT><DD>Mean probability that there is a token of the respective color in the queue/depository.</DD>
  <DT><span class="GUIElement bold">stDevAvgTkPop:</span></DT><DD>Standard deviation of the average token population.</DD>
  <DT><span class="GUIElement bold">stDevColUtil:</span></DT><DD>Standard deviation of the probability that there is a token of the respective color in the queue/depository.</DD>
  <DT><span class="GUIElement bold">meanAvgST:</span></DT><DD>Mean of the average residence times measured form the run replications.</DD>
  <DT><span class="GUIElement bold">stDevAvgST:</span></DT><DD>Standard deviation of the residence times measured form the run replications.</DD>
  <DT><span class="GUIElement bold">90% c.i.:</span></DT><DD>90% confidence interval of the mean residence time.</DD>
</DL>

<br/>
<hr/>
<p style="text-align:center;" /> Copyright (c) 2006 Samuel Kounev and Christofer Dutz

</body>
</html>
